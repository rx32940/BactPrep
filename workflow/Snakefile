import os
import re

BACTPREPPATH=config["bactprep_path"].strip() if config["bactprep_path"][-1] == "/" else str(config["bactprep_path"] + "/").strip()
WORKFLOW = BACTPREPPATH + "workflow/"

reference = str(config["reference"])

phage=config["phage_region"].strip()
project_prefix = config["project_name"].strip()
THREADS = config["threads_num"]
asm_dir = config["asm_dir"].strip() if config["asm_dir"][-1] == "/" else str(config["asm_dir"] + "/").strip()
out_dir = config["output_dir"].strip() if config["output_dir"][-1] == "/" else str(config["output_dir"] + "/").strip()
matlab_path = config["LD_LIBRARY_PATH"].strip() 
fastGear_exe = config["fastGear_exe_path"].strip() if config["fastGear_exe_path"][-1] == "/" else str(config["fastGear_exe_path"] + "/").strip()
mcr_path = config["mcr_path"].strip() if config["mcr_path"][-1] == "/" else str(config["mcr_path"] + "/").strip()
core_percentage = config["define_core"]
metadata_file=config["sample_metadata"].strip()
metadata_include = config["metadata_include"].strip()
biosample_column = config["biosample_column"]
fastGear_params=config['fastGear_params'].strip()
roary_params=config['roary'].strip()
gubbins_params=config['gubbins'].strip()
# within_species=config["within_species"]

# pre-defined folder names
pirate_dir = os.path.join(out_dir , "pirate/")
roary_dir = os.path.join(out_dir , "roary/")
iqtree_dir = os.path.join(out_dir , "roary/roary_iqtree/")
snippy_dir = os.path.join(out_dir , "snippy/")
gubbins_dir = os.path.join(out_dir , "gubbins/")
fastGear_core_dir = os.path.join(out_dir , "fastgear_core/")
fastGear_dir = os.path.join(out_dir , "fastgear/")
fastGear_gene_dir = os.path.join(out_dir , "fastgear_gene/")
prokka_dir = os.path.join(out_dir , "prokka/")
gff_dir_self = config["gff_dir"]

def get_gff_dir(gff_dir_self):
    if gff_dir_self:
        return gff_dir_self
    else:
        return os.path.join(out_dir , "gff/")

gff_dir = get_gff_dir(gff_dir_self)

def get_sample_dir(gff_dir_self):
    if gff_dir_self:
        return gff_dir
    else:
        return asm_dir


# get all sample ID from either assembly file names or gff file names (if provided)
SAMPLES = [os.path.splitext(file)[0] for file in os.listdir(get_sample_dir(gff_dir_self)) if not file.startswith(".")]
# get gff file dir base on if user had provided
# gff_dir = get_gff_dir(gff_dir_self)

subworkflowdir = WORKFLOW + "rules/"

# include rules in the workflow
include: subworkflowdir + "sample_names.smk"
include: subworkflowdir + "prokka.smk"
include: subworkflowdir + "pangenome.smk"
include: subworkflowdir + "roary.smk"
include: subworkflowdir + "snippy.smk"
include: subworkflowdir + "gubbins.smk"
include: subworkflowdir + "fastGear.smk"
include: subworkflowdir + "fastGear_core.smk"
include: subworkflowdir + "annotate_gubbins.smk"
include: subworkflowdir + "annotate_roary.smk"
include: subworkflowdir + "annotate_fastGear.smk"
include: subworkflowdir + "fastGear_gene.smk"


# print(get_prokka_output(gff_dir_self))

# expected output files triggers each rule
rule all:
    input:
        config['output'].split(",")

