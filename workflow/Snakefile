import os
configfile: "config/config.yaml"

reference = config["reference"]

phage=config["phage_region"]
project_prefix = config["project_name"]
THREADS = config["threads_num"]
asm_dir = config["asm_dir"]
out_dir = config["output_dir"]
matlab_path = config["LD_LIBRARY_PATH"]
fastGear_exe = config["fastGear_exe_path"]
mcr_path = config["mcr_path"]
core_percentage = config["define_core"]
metadata_file=config["sample_metadata"]
metadata_include = config["metadata_include"]
biosample_column = config["biosample_column"]
within_species=config["within_species"]

subworkflowdir = "rules/"

# pre-defined folder names
pirate_dir = out_dir + "pirate/"
roary_dir = out_dir + "roary/"
iqtree_dir = out_dir + "iqtree/"
snippy_dir = out_dir + "snippy/"
gubbins_dir = out_dir + "gubbins/"
fastGear_dir = out_dir + "fastgear/"
prokka_dir = out_dir + "prokka/"
gff_dir_self = config["gff_dir"]

def get_gff_dir(gff_dir_self):
    if gff_dir_self:
        return gff_dir_self
    else:
        return out_dir + "gff/"

gff_dir = get_gff_dir(gff_dir_self)

def get_sample_dir(gff_dir_self):
    if gff_dir_self:
        return gff_dir
    else:
        return asm_dir

def get_prokka_output(gff_dir_self):
    if gff_dir == gff_dir_self:
        return []
    else:
        return expand(gff_dir+ "{sample}.gff", sample=SAMPLES)

def get_core_output(within_species):
    if within_species:
        return roary_dir + "core_gene_alignment.aln"
    else:
        return pirate_dir + "pirate_roary_pres_abs.csv"

def get_fastGear_output(matlab_path,fastGear_exe,mcr_path):
    if matlab_path and fastGear_exe and mcr_path:
        return fastGear_dir + "fastgear_iqtree/" + project_prefix + "_core_mask_snp.treefile"
    else:
        return []

def get_annotated(metadata_file, metadata_include):
    if metadata_file and metadata_include:
        if matlab_path and fastGear_exe and mcr_path:
            return [gubbins_dir  + project_prefix + "_meta.recombFreeSnpsAtcg.fasta", fastGear_dir + project_prefix + "_core_mask_snp_meta.fasta",gubbins_dir  + "iqtree/" +  project_prefix + "_meta.GubbinsSNPs.newick", fastGear_dir + "fastgear_iqtree/" +  project_prefix + "_meta.coreSNPs.newick", iqtree_dir + project_prefix + "_meta.coreSNPs.newick"]

        else:
            return [gubbins_dir  + project_prefix + "_meta.recombFreeSnpsAtcg.fasta", gubbins_dir  + project_prefix + "_meta.GubbinsSNPs.newick", iqtree_dir + project_prefix + "_meta.coreSNPs.newick"]
    else:
        return []



# get all sample ID from either assembly file names or gff file names (if provided)
SAMPLES = [os.path.splitext(file)[0] for file in os.listdir(get_sample_dir(gff_dir_self))]
# get gff file dir base on if user had provided
gff_dir = get_gff_dir(gff_dir_self)

# include rules in the workflow
include: subworkflowdir + "sample_names.smk"
include: subworkflowdir + "prokka.smk"
include: subworkflowdir + "pangenome.smk"
include: subworkflowdir + "roary.smk"
include: subworkflowdir + "snippy.smk"
include: subworkflowdir + "gubbins.smk"
include: subworkflowdir + "ml.smk"
include: subworkflowdir + "fastGear.smk"

print(get_prokka_output(gff_dir_self))

# expected output files triggers each rule
rule all:
    input: 
        out_dir + "all_samples_id.txt",
        # annotate asm for gff files
        get_prokka_output(gff_dir_self),
        get_core_output(within_species),
        iqtree_dir + project_prefix +".treefile",
        # snippy_dir + "clean.full.noref.aln",
        gubbins_dir + "iqtree/" + project_prefix + ".recombFreeSnpsAtcg.treefile",
        get_fastGear_output(matlab_path,fastGear_exe,mcr_path),
        get_annotated(metadata_file, metadata_include)
